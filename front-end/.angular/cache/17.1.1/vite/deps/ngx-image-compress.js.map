{
  "version": 3,
  "sources": ["../../../../../node_modules/ngx-image-compress/fesm2020/ngx-image-compress.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, ViewChild, Component, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * EXIF tag standard reference\n *\n * Tag Name: Orientation\n * Tag ID: 0x0112\n * Writable: int16u\n * Group: IFD0\n * Values:\n 1 = Horizontal (normal)\n 2 = Mirror horizontal\n 3 = Rotate 180\n 4 = Mirror vertical\n 5 = Mirror horizontal and rotate 270 CW\n 6 = Rotate 90 CW\n 7 = Mirror horizontal and rotate 90 CW\n 8 = Rotate 270 CW\n */\nconst _c0 = [\"video\"];\nfunction NgxImageCaptureComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 2);\n    i0.ɵɵlistener(\"click\", function NgxImageCaptureComponent_span_0_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.startVideoCapture());\n    });\n    i0.ɵɵprojection(1);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NgxImageCaptureComponent_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 2);\n    i0.ɵɵlistener(\"click\", function NgxImageCaptureComponent_span_1_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.acquireImage());\n    });\n    i0.ɵɵprojection(1, 1);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NgxImageCaptureComponent_video_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"video\", 3, 4);\n  }\n}\nconst _c1 = [[[\"\", \"openStreamBtn\", \"\"]], [[\"\", \"acquireImageBtn\", \"\"]]];\nconst _c2 = [\"[openStreamBtn]\", \"[acquireImageBtn]\"];\nvar DOC_ORIENTATION;\n(function (DOC_ORIENTATION) {\n  DOC_ORIENTATION[DOC_ORIENTATION[\"Up\"] = 1] = \"Up\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"Down\"] = 3] = \"Down\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"Right\"] = 6] = \"Right\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"Left\"] = 8] = \"Left\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"UpMirrored\"] = 2] = \"UpMirrored\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"DownMirrored\"] = 4] = \"DownMirrored\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"LeftMirrored\"] = 5] = \"LeftMirrored\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"RightMirrored\"] = 7] = \"RightMirrored\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"Default\"] = 0] = \"Default\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"NotJpeg\"] = -1] = \"NotJpeg\";\n  DOC_ORIENTATION[DOC_ORIENTATION[\"NotDefined\"] = -2] = \"NotDefined\";\n})(DOC_ORIENTATION || (DOC_ORIENTATION = {}));\nvar _a;\nclass ImageCompress {}\n_a = ImageCompress;\nImageCompress.getOrientation = file => new Promise((resolve, reject) => {\n  try {\n    const reader = new FileReader();\n    reader.onload = () => {\n      const view = new DataView(reader.result);\n      if (!view.byteLength) {\n        return resolve(DOC_ORIENTATION.NotDefined);\n      }\n      if (view.getUint16(0, false) !== 0xffd8) {\n        return resolve(DOC_ORIENTATION.NotDefined);\n      }\n      const length = view.byteLength;\n      let offset = 2;\n      while (offset < length) {\n        const marker = view.getUint16(offset, false);\n        offset += 2;\n        if (marker === 0xffe1) {\n          if (view.getUint32(offset += 2, false) !== 0x45786966) {\n            return resolve(DOC_ORIENTATION.NotJpeg);\n          }\n          const little = view.getUint16(offset += 6, false) === 0x4949;\n          offset += view.getUint32(offset + 4, little);\n          const tags = view.getUint16(offset, little);\n          offset += 2;\n          for (let i = 0; i < tags; i++) {\n            if (view.getUint16(offset + i * 12, little) === 0x0112) {\n              return resolve(view.getUint16(offset + i * 12 + 8, little));\n            }\n          }\n        } else if ((marker & 0xff00) !== 0xff00) {\n          break;\n        } else {\n          offset += view.getUint16(offset, false);\n        }\n      }\n      return resolve(DOC_ORIENTATION.NotJpeg);\n    };\n    reader.readAsArrayBuffer(file);\n  } catch (e) {\n    return reject(DOC_ORIENTATION.Default);\n  }\n});\nImageCompress.uploadFile = (render, multiple = true, rejectOnCancel = false) => new Promise(function (resolve, reject) {\n  const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  const isIOS = /iPad|iPhone|iPod/i.test(navigator.userAgent);\n  Promise.resolve(isSafari || isIOS).then(onlyNative => {\n    if (onlyNative) {\n      return ImageCompress.generateUploadInputNative(window.document, multiple, rejectOnCancel);\n    } else {\n      return ImageCompress.generateUploadInputRenderer(render, multiple, rejectOnCancel);\n    }\n  }).then(filesList => {\n    const files = filesList ? Array.from(filesList) : [];\n    const orientationPromises = files.map(file => ImageCompress.getOrientation(file));\n    const readerPromises = files.map(file => ImageCompress.fileToDataURL(file));\n    let orientationsResult = [];\n    Promise.all(orientationPromises).then(orientations => {\n      orientationsResult = orientations;\n      return Promise.all(readerPromises);\n    }).then(readerResult => {\n      const resultArray = readerResult.map((parsedFile, index) => ({\n        image: parsedFile.dataUrl,\n        orientation: orientationsResult[index],\n        fileName: parsedFile.fileName\n      }));\n      if (multiple) {\n        resolve(resultArray);\n      } else {\n        resolve(resultArray[0]);\n      }\n    });\n  }).catch(err => reject(err));\n});\nImageCompress.fileToDataURL = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      //myReader.onloadend = (progressEvent: ProgressEvent<FileReader>)\n      resolve({\n        dataUrl: e.target.result,\n        fileName: file.name\n      });\n    };\n    try {\n      reader.readAsDataURL(file);\n    } catch (e) {\n      reject(`ngx-image-compress - probably no file have been selected: ${e}`);\n    }\n  });\n};\nImageCompress.generateUploadInputRenderer = (render, multiple = true, rejectOnCancel = false) => {\n  let lock = false;\n  return new Promise((resolve, reject) => {\n    const inputElement = render.createElement('input');\n    render.setStyle(inputElement, 'display', 'none');\n    render.setProperty(inputElement, 'type', 'file');\n    render.setProperty(inputElement, 'accept', 'image/*');\n    if (multiple) {\n      render.setProperty(inputElement, 'multiple', 'true');\n    }\n    render.listen(inputElement, 'click', $event => {\n      $event.target.value = '';\n    });\n    render.listen(inputElement, 'change', $event => {\n      lock = true;\n      const files = $event.target.files;\n      resolve(files);\n    });\n    if (rejectOnCancel) {\n      window.addEventListener('focus', () => {\n        setTimeout(() => {\n          if (!lock) {\n            reject(new Error('file upload on blur - no file selected'));\n          }\n        }, 300);\n      }, {\n        once: true\n      });\n    }\n    inputElement.click();\n  });\n};\nImageCompress.generateUploadInputNative = (documentNativeApi, multiple = true, rejectOnCancel = false) => {\n  let lock = false;\n  return new Promise((resolve, reject) => {\n    const inputElement = documentNativeApi.createElement('input');\n    inputElement.id = 'upload-input' + new Date();\n    inputElement.style.display = 'none';\n    inputElement.setAttribute('type', 'file');\n    inputElement.setAttribute('accept', 'image/*');\n    if (multiple) {\n      inputElement.setAttribute('multiple', 'true');\n    }\n    documentNativeApi.body.appendChild(inputElement);\n    inputElement.addEventListener('change', () => {\n      lock = true;\n      resolve(inputElement.files);\n      documentNativeApi.body.removeChild(documentNativeApi.getElementById(inputElement.id));\n    }, {\n      once: true\n    });\n    if (rejectOnCancel) {\n      window.addEventListener('focus', () => {\n        setTimeout(() => {\n          if (!lock && documentNativeApi.getElementById(inputElement.id)) {\n            reject(new Error('file upload on blur - no file selected'));\n            documentNativeApi.body.removeChild(documentNativeApi.getElementById(inputElement.id));\n          }\n        }, 300);\n      }, {\n        once: true\n      });\n    }\n    // open file select box\n    inputElement.click();\n  });\n};\nImageCompress.compress = (imageDataUrlSource, orientation, render, ratio = 50, quality = 50, maxwidth = 0, maxheight = 0) => new Promise(function (resolve, reject) {\n  quality = quality / 100;\n  ratio = ratio / 100;\n  const sourceImage = new Image();\n  // important for safari: we need to wait for onload event\n  sourceImage.onload = () => {\n    const canvas = render.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return reject(`No canvas context available`);\n    }\n    let w = sourceImage.naturalWidth;\n    let h = sourceImage.naturalHeight;\n    if (!CSS.supports('image-orientation', 'from-image')) {\n      if (orientation === DOC_ORIENTATION.Right || orientation === DOC_ORIENTATION.Left) {\n        const t = w;\n        w = h;\n        h = t;\n      }\n    }\n    const xratio = maxwidth ? maxwidth / w : 1;\n    const yratio = maxheight ? maxheight / h : 1;\n    ratio = Math.min(ratio, xratio, yratio);\n    canvas.width = w * ratio;\n    canvas.height = h * ratio;\n    const TO_RADIANS = Math.PI / 180;\n    if (CSS.supports('image-orientation', 'from-image') || orientation === DOC_ORIENTATION.Up) {\n      ctx.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);\n    } else if (orientation === DOC_ORIENTATION.Right) {\n      ctx.save();\n      ctx.rotate(90 * TO_RADIANS);\n      ctx.translate(0, -canvas.width);\n      ctx.drawImage(sourceImage, 0, 0, canvas.height, canvas.width);\n      ctx.restore();\n    } else if (orientation === DOC_ORIENTATION.Left) {\n      ctx.save();\n      ctx.rotate(-90 * TO_RADIANS);\n      ctx.translate(-canvas.width, 0);\n      ctx.drawImage(sourceImage, 0, 0, canvas.height, canvas.width);\n      ctx.restore();\n    } else if (orientation === DOC_ORIENTATION.Down) {\n      ctx.save();\n      ctx.rotate(180 * TO_RADIANS);\n      ctx.translate(-canvas.width, -canvas.height);\n      ctx.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);\n      ctx.restore();\n    } else {\n      // no orientation value found - same as default UP\n      ctx.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);\n    }\n    const mime = imageDataUrlSource.substr(5, imageDataUrlSource.split(';')[0].length - 5);\n    // TODO test on mime\n    const result = canvas.toDataURL(mime, quality);\n    resolve(result);\n  };\n  sourceImage.onerror = e => reject(e);\n  sourceImage.src = imageDataUrlSource;\n});\nImageCompress.byteCount = imgString => encodeURI(imgString).split(/%..|./).length - 1;\nImageCompress.getImageMaxSize = async (maxSizeMb, debugMode, render, rejectOnCancel = false) => {\n  const MAX_TRIES = 10;\n  const bytesToMB = bytes => (bytes / 1024 / 1024).toFixed(2);\n  if (debugMode) {\n    console.debug('NgxImageCompress - Opening upload window');\n  }\n  const myFile = await ImageCompress.uploadFile(render, false, rejectOnCancel);\n  let compressedFile;\n  for (let i = 0; i < MAX_TRIES; i++) {\n    const previousSize = ImageCompress.byteCount(myFile.image);\n    compressedFile = await ImageCompress.compress(myFile.image, myFile.orientation, render, 50, 100);\n    const newSize = ImageCompress.byteCount(compressedFile);\n    console.debug('NgxImageCompress -', 'Compression from', bytesToMB(previousSize), 'MB to', bytesToMB(newSize), 'MB');\n    if (newSize >= previousSize) {\n      if (i === 0) {\n        if (debugMode) {\n          console.debug('NgxImageCompress -', \"File can't be reduced at all - returning the original\", bytesToMB(previousSize), 'MB large');\n        }\n        throw {\n          ...myFile,\n          image: compressedFile\n        };\n      } else {\n        if (debugMode) {\n          console.debug('NgxImageCompress -', \"File can't be reduced more - returning the best we can, which is \", bytesToMB(previousSize), 'MB large');\n        }\n        throw {\n          ...myFile,\n          image: compressedFile\n        };\n      }\n    } else {\n      if (newSize < maxSizeMb * 1024 * 1024) {\n        if (debugMode) {\n          console.debug('NgxImageCompress -', 'Here your file', bytesToMB(newSize), 'MB large');\n        }\n        return {\n          ...myFile,\n          image: compressedFile\n        };\n      } else if (i === 9) {\n        if (debugMode) {\n          console.debug('NgxImageCompress -', \"File can't reach the desired size after\", MAX_TRIES, 'tries. Returning file ', bytesToMB(previousSize), 'MB large');\n        }\n        throw {\n          ...myFile,\n          image: compressedFile\n        };\n      }\n    }\n    if (debugMode) {\n      console.debug('NgxImageCompress -', 'Reached', bytesToMB(newSize), 'MB large. Trying another time after', i + 1, 'times');\n    }\n    myFile.image = compressedFile;\n  }\n  if (debugMode) {\n    console.debug('NgxImageCompress - Unexpected error');\n  }\n  throw {};\n};\nclass NgxImageCompressService {\n  constructor(rendererFactory) {\n    this.DOC_ORIENTATION = DOC_ORIENTATION;\n    this.render = rendererFactory.createRenderer(null, null);\n  }\n  /**\n   * helper to evaluate the compression rate\n   * @param imgString the image in base64 string format\n   */\n  byteCount(image) {\n    return ImageCompress.byteCount(image);\n  }\n  /**\n   * Get the correct Orientation value from image tags\n   */\n  getOrientation(file) {\n    return ImageCompress.getOrientation(file);\n  }\n  /**\n   * return a promise with the new image data and image orientation\n   * Nothing happen if no file have been selected\n   */\n  uploadFile() {\n    return ImageCompress.uploadFile(this.render, false);\n  }\n  /**\n   * return a promise with an array of image data and image orientation\n   * Nothing happen if no files have been selected\n   */\n  uploadMultipleFiles() {\n    return ImageCompress.uploadFile(this.render, true);\n  }\n  /**\n   * return a promise with the new image data and image orientation\n   * the promise will reject if no file have been selected\n   */\n  uploadFileOrReject() {\n    return ImageCompress.uploadFile(this.render, false, true);\n  }\n  /**\n   * return a promise with an array of image data and image orientation\n   * the promise will reject if no files have been selected\n   */\n  uploadMultipleFilesOrReject() {\n    return ImageCompress.uploadFile(this.render, true, true);\n  }\n  /**\n  * perform a compression from the given DataUrl (string), provided by the uploadFile, or uploadMultipleFiles method\n  *\n  *\n  | Parameter   | Type   | Description                                                                       |\n  | ----------- | ------ | --------------------------------------------------------------------------------- |\n  | image       | string | DataUrl (string) representing the image                                           |\n  | orientation | number | EXIF Orientation value using the DOC_ORIENTATION enum value                       |\n  | ratio       | number | Maximum scale factor as a percentage (optional, default: 50) <sup>[1](#fn1)</sup> |\n  | quality     | number | JPEG quality factor as a percentage (optional, default: 50) <sup>[2](#fn2)</sup>  |\n  | maxwidth    | number | Maximum width in pixels if you need to resize (optional, default: 0 - no resize)  |\n  | maxheight   | number | Maximum height in pixels if you need to resize (optional, default: 0 - no resize) |\n  */\n  compressFile(image, orientation, ratio = 50, quality = 50, maxWidth = 0, maxHeight = 0) {\n    return ImageCompress.compress(image, orientation, this.render, ratio, quality, maxWidth, maxHeight);\n  }\n  /**\n   * Most simple function to use here.\n   * Perform an upload and return an image dataUrl (string format) with a maximum size, given in *MegaBytes*\n   * If the size can't be reached, the best that can be reached will be returned in promise *rejection*\n   * Put debugMode to true if you have some trouble to print some help using console.debug\n   */\n  uploadAndGetImageWithMaxSize(maxSizeMb = 1, debugMode = false, rejectOnCancel = false) {\n    return ImageCompress.getImageMaxSize(maxSizeMb, debugMode, this.render, rejectOnCancel).then(uploadResponse => uploadResponse.image).catch(e => {\n      throw e.image;\n    });\n  }\n  /**\n   * Same as before, but return more informations (file name...)\n   */\n  uploadAndGetImageWithMaxSizeAndMetas(maxSizeMb = 1, debugMode = false, rejectOnCancel = false) {\n    return ImageCompress.getImageMaxSize(maxSizeMb, debugMode, this.render, rejectOnCancel);\n  }\n}\nNgxImageCompressService.ɵfac = function NgxImageCompressService_Factory(t) {\n  return new (t || NgxImageCompressService)(i0.ɵɵinject(i0.RendererFactory2));\n};\nNgxImageCompressService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxImageCompressService,\n  factory: NgxImageCompressService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxImageCompressService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.RendererFactory2\n    }];\n  }, null);\n})();\nclass NgxImageCaptureComponent {\n  constructor() {\n    this.imageCaptured = new EventEmitter();\n    this.errorCapture = new EventEmitter();\n    this.videoElement = null;\n    this.videoStream = ViewChild('video');\n    this.streamOpened = false;\n  }\n  startVideoCapture() {\n    this.streamOpened = true;\n    const constraints = {\n      audio: false,\n      video: {\n        width: {\n          ideal: 1920\n        },\n        height: {\n          ideal: 1080\n        },\n        facingMode: {\n          ideal: 'user'\n        }\n      }\n    };\n    navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n      this.videoStream = stream;\n      setTimeout(() => {\n        if (this.videoElement?.nativeElement) {\n          this.videoElement.nativeElement.srcObject = stream;\n        }\n      }, 100);\n    }).catch(error => {\n      this.errorCapture.emit(`Ngx Image Compress: Could not access the camera. ${error}`);\n      this.streamOpened = true;\n    });\n  }\n  acquireImage() {\n    const canvas = document.createElement('canvas');\n    const video = this.videoElement?.nativeElement;\n    if (!video) {\n      this.errorCapture.emit('Ngx Image Compress - Error in acquisition of video element.');\n      this.streamOpened = false;\n      return;\n    }\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    canvas.getContext('2d')?.drawImage(video, 0, 0);\n    const newImage = canvas.toDataURL('jpg', 95);\n    if (this.videoStream) {\n      this.videoStream.getVideoTracks().forEach(track => track.stop());\n    }\n    this.imageCaptured.emit(newImage);\n    this.streamOpened = false;\n  }\n}\nNgxImageCaptureComponent.ɵfac = function NgxImageCaptureComponent_Factory(t) {\n  return new (t || NgxImageCaptureComponent)();\n};\nNgxImageCaptureComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxImageCaptureComponent,\n  selectors: [[\"ngx-image-capture\"]],\n  viewQuery: function NgxImageCaptureComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.videoElement = _t.first);\n    }\n  },\n  outputs: {\n    imageCaptured: \"imageCaptured\",\n    errorCapture: \"errorCapture\"\n  },\n  ngContentSelectors: _c2,\n  decls: 3,\n  vars: 3,\n  consts: [[3, \"click\", 4, \"ngIf\"], [\"autoplay\", \"\", 4, \"ngIf\"], [3, \"click\"], [\"autoplay\", \"\"], [\"video\", \"\"]],\n  template: function NgxImageCaptureComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c1);\n      i0.ɵɵtemplate(0, NgxImageCaptureComponent_span_0_Template, 2, 0, \"span\", 0)(1, NgxImageCaptureComponent_span_1_Template, 2, 0, \"span\", 0)(2, NgxImageCaptureComponent_video_2_Template, 2, 0, \"video\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.streamOpened);\n      i0.ɵɵadvance();\n      i0.ɵɵproperty(\"ngIf\", ctx.streamOpened);\n      i0.ɵɵadvance();\n      i0.ɵɵproperty(\"ngIf\", ctx.streamOpened);\n    }\n  },\n  dependencies: [i1.NgIf],\n  encapsulation: 2\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxImageCaptureComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-image-capture',\n      template: `\n        <span (click)=\"startVideoCapture()\" *ngIf=\"!streamOpened\">\n            <ng-content select=\"[openStreamBtn]\"></ng-content>\n        </span>\n        <span (click)=\"acquireImage()\" *ngIf=\"streamOpened\">\n            <ng-content select=\"[acquireImageBtn]\"></ng-content>\n        </span>\n        <video #video autoplay *ngIf=\"streamOpened\"></video>\n    `\n    }]\n  }], null, {\n    imageCaptured: [{\n      type: Output\n    }],\n    errorCapture: [{\n      type: Output\n    }],\n    videoElement: [{\n      type: ViewChild,\n      args: ['video']\n    }]\n  });\n})();\nclass NgxImageCaptureModule {}\nNgxImageCaptureModule.ɵfac = function NgxImageCaptureModule_Factory(t) {\n  return new (t || NgxImageCaptureModule)();\n};\nNgxImageCaptureModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxImageCaptureModule,\n  declarations: [NgxImageCaptureComponent],\n  imports: [CommonModule],\n  exports: [NgxImageCaptureComponent]\n});\nNgxImageCaptureModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxImageCaptureModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxImageCaptureComponent],\n      imports: [CommonModule],\n      exports: [NgxImageCaptureComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-image-compress\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DOC_ORIENTATION, NgxImageCaptureComponent, NgxImageCaptureModule, NgxImageCompressService };\n"],
  "mappings": "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",
  "names": ["DOC_ORIENTATION"]
}
